generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  clerkId      String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
  modules      Module[]
  questions    Question[]

  @@map("users")
}

model Video {
  id        String   @id @default(uuid())
  moduleId  String   @unique
  fileKey   String   @unique
  status    String   @default("UPLOADING") // UPLOADING | READY
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Module {
  id        String         @id @default(cuid())
  title     String
  filename  String
  videoUrl  String
  progress  Int            @default(0)
  userId    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  lastError String?
  s3Key     String?
  statuses  ModuleStatus[]
  stepsKey  String?
  status    ModuleStatus   @default(UPLOADED)
  feedbacks Feedback[]
  user      User?          @relation(fields: [userId], references: [id])
  questions Question[]
  steps     Step[]
  video     Video?

  @@map("modules")
}

model Step {
  id             String     @id @default(cuid())
  moduleId       String
  order          Int
  createdAt      DateTime   @default(now())
  aiConfidence   Float?
  confusionScore Float?
  text           String
  startTime      Int
  endTime        Int
  updatedAt      DateTime   @updatedAt
  questions      Question[]
  module         Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("steps")
}

model Feedback {
  id        String   @id @default(cuid())
  moduleId  String
  type      String
  action    String
  context   String?
  sessionId String?
  createdAt DateTime @default(now())
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model AIInteraction {
  id          String   @id @default(cuid())
  moduleId    String
  userMessage String
  aiResponse  String
  source      String?
  context     Json?
  createdAt   DateTime @default(now())
  sourceModel String?
  usedMemory  Boolean  @default(false)

  @@map("ai_interactions")
}

model TrainingSession {
  id        String    @id @default(cuid())
  moduleId  String
  userId    String?
  sessionId String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?

  @@map("training_sessions")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model Question {
  id         String          @id @default(cuid())
  moduleId   String
  stepId     String?
  question   String
  answer     String
  videoTime  Float?
  isFAQ      Boolean         @default(false)
  userId     String?
  createdAt  DateTime        @default(now())
  lastUsedAt DateTime?
  reuseCount Int             @default(0)
  vector     QuestionVector?
  module     Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  step       Step?           @relation(fields: [stepId], references: [id])
  user       User?           @relation(fields: [userId], references: [id])

  @@index([reuseCount])
  @@map("questions")
}

model QuestionVector {
  id         String   @id @default(cuid())
  questionId String   @unique
  embedding  Float[]
  createdAt  DateTime @default(now())
  modelName  String?  @default("openai-embedding-3-small")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_vectors")
}

enum ModuleStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}
