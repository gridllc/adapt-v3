generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Module {
  id                                    String         @id
  title                                 String
  filename                              String
  videoUrl                              String
  progress                              Int            @default(0)
  userId                                String?        @map("userId")
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime
  lastError                             String?
  s3Key                                 String?
  statuses                              ModuleStatus[]
  stepsKey                              String?
  status                                ModuleStatus   @default(UPLOADED) @map("status")
  transcriptJobId                       String?
  transcriptText                        String?
  feedbacks                             Feedback[]
  users                                 User?          @relation(fields: [userId], references: [id])
  questions_questions_moduleIdTomodules Question[]     @relation("questions_moduleIdTomodules")
  questions                             Question[]
  steps                                 Step[]

  @@map("modules")
}

model Step {
  id             String     @id @default(cuid())
  moduleId       String
  order          Int
  createdAt      DateTime   @default(now())
  aiConfidence   Float?
  confusionScore Float?
  text           String
  startTime      Int
  endTime        Int
  updatedAt      DateTime
  aliases        String[]   @default([])
  notes          String?
  questions      Question[]
  module         Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("steps")
}

model Question {
  id                                  String   @id @default(cuid())
  moduleId                            String?  @map("module_id")
  stepId                              String?  @map("step_id")
  question                            String
  answer                              String?
  isFAQ                               Boolean  @default(false) @map("is_faq")
  userId                              String?  @map("user_id") // keep snake_case in DB; adjust @map if your DB currently has "userId"
  videoTime                           Float?
  createdAt                           DateTime @default(now()) @map("created_at")

  // Relations to match Module model
  modules_questions_moduleIdTomodules Module   @relation("questions_moduleIdTomodules", fields: [moduleId], references: [id])
  module                              Module?  @relation(fields: [moduleId], references: [id])

  @@index([moduleId])
  @@map("questions")
}

model QuestionVector {
  id         String   @id @default(uuid())
  questionId String   @unique @map("questionId")
  embedding  Float[]
  createdAt  DateTime @default(now())
  modelName  String?  @default("openai-embedding-3-small")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_vectors")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  clerkId       String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  activity_logs ActivityLog[]
  modules       Module[]
  questions     Question[]

  @@map("users")
}

model Feedback {
  id        String   @id @default(cuid())
  moduleId  String
  type      String
  action    String
  context   String?
  sessionId String?
  createdAt DateTime @default(now())
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model AIInteraction {
  id          String   @id @default(cuid())
  moduleId    String
  userMessage String
  aiResponse  String
  source      String?
  context     Json?
  createdAt   DateTime @default(now())
  sourceModel String?
  usedMemory  Boolean  @default(false)

  @@map("ai_interactions")
}

model TrainingSession {
  id        String    @id @default(cuid())
  moduleId  String
  userId    String?
  sessionId String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?

  @@map("training_sessions")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  users     User?    @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

enum ModuleStatus {
  UPLOADED
  PROCESSING
  READY
  FAILED
}
