generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ===== Models aligned to your current Postgres =====

model Module {
  id              String   @id
  title           String
  filename        String
  videoUrl        String
  progress        Int      @default(0)
  userId          String?  @map("userId")
  createdAt       DateTime @default(now()) @db.Timestamp(3)
  updatedAt       DateTime @db.Timestamp(3)
  lastError       String?
  s3Key           String?
  statuses        String[] @db.Text      // PG enum array "ModuleStatus" -> keep as text[] for safety
  stepsKey        String?
  status          Unsupported("ModuleStatus") @default(dbgenerated("'UPLOADED'::\"ModuleStatus\""))
  transcriptJobId String?
  transcriptText  String?

  // Relations (optional to keep loose; add back if you want typed relations)
  // steps     Step[]
  // questions Question[]

  @@map("modules")
}

model Step {
  id             String    @id
  moduleId       String
  order          Int
  createdAt      DateTime  @default(now()) @db.Timestamp(3)
  aiConfidence   Float?
  confusionScore Float?
  text           String
  startTime      Int
  endTime        Int
  updatedAt      DateTime  @db.Timestamp(3)
  aliases        String[]  @db.Text
  notes          String?

  // Relation back to Module (optional)
  // module Module @relation(fields: [moduleId], references: [id])

  @@map("steps")
}

model Question {
  id         String   @id
  /// Use snake column in DB, keep camel in code
  moduleId   String   @map("module_id")
  stepId     String?  @map("stepId")
  question   String
  answer     String
  videoTime  Float?
  /// Prisma field using the snake column
  isFAQ      Boolean  @default(false) @map("is_faq")
  /// Legacy camel column exists in DB; ignore it so Prisma doesn't try to use it
  legacyIsFAQ Boolean? @map("isFAQ") @ignore
  userId     String?  @map("userId")
  createdAt  DateTime @default(now()) @db.Timestamp(3)
  lastUsedAt DateTime? @db.Timestamp(3)
  reuseCount Int      @default(0)

  // Optional relations:
  // module Module @relation(fields: [moduleId], references: [id])
  // step   Step?  @relation(fields: [stepId], references: [id])

  @@index([reuseCount], map: "questions_reuseCount_idx")
  @@map("questions")
}

model QuestionVector {
  id         String   @id @default(uuid()) // DB column is uuid; Prisma will store as String
  questionId String   @map("questionId")
  // Relation (optional)
  // question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  embedding  Unsupported("vector") // pgvector(1536)

  @@unique([questionId], map: "question_vectors_questionid_key")
  @@map("question_vectors")
}

/// Minimal User so FKs to users(id) stop complaining (keep loose; add fields as needed)
model User {
  id String @id
  @@map("users")
}
