generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  clerkId      String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
  modules      Module[]
  questions    Question[]

  @@map("users")
}

model Module {
  id        String         @id @default(cuid())
  title     String
  filename  String
  videoUrl  String
  status    String         @default("processing")
  progress  Int            @default(0)
  userId    String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  feedbacks Feedback[]
  statuses  ModuleStatus[]
  user      User?          @relation(fields: [userId], references: [id])
  questions Question[]
  steps     Step[]

  @@map("modules")
}

model Step {
  id             String     @id @default(cuid())
  moduleId       String
  timestamp      Int
  title          String
  description    String
  duration       Int
  order          Int
  confusionScore Float?     // calculated based on repeated questions
  aiConfidence   Float?     // optional output from AI summary logic
  createdAt      DateTime   @default(now())
  questions      Question[]
  module         Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("steps")
}

model ModuleStatus {
  id        String   @id @default(cuid())
  moduleId  String
  status    String
  progress  Int
  message   String?
  createdAt DateTime @default(now())
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("module_statuses")
}

model Feedback {
  id        String   @id @default(cuid())
  moduleId  String
  type      String
  action    String
  context   String?
  sessionId String?
  createdAt DateTime @default(now())
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model AIInteraction {
  id          String   @id @default(cuid())
  moduleId    String
  userMessage String
  aiResponse  String
  source      String?
  sourceModel String?  // openai or gemini
  usedMemory  Boolean  @default(false) // whether shared memory was used
  context     Json?
  createdAt   DateTime @default(now())

  @@map("ai_interactions")
}

model TrainingSession {
  id        String    @id @default(cuid())
  moduleId  String
  userId    String?
  sessionId String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  duration  Int?

  @@map("training_sessions")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model Question {
  id          String          @id @default(cuid())
  moduleId    String
  stepId      String?
  question    String
  answer      String
  videoTime   Float?
  isFAQ       Boolean         @default(false)
  reuseCount  Int             @default(0) // Track how many times this answer has been reused
  lastUsedAt  DateTime?       // When this answer was last reused
  userId      String?
  createdAt   DateTime        @default(now())
  vector      QuestionVector?
  module      Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  step        Step?           @relation(fields: [stepId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@index([reuseCount]) // For finding most reused answers
  @@map("questions")
}

model QuestionVector {
  id         String   @id @default(cuid())
  questionId String   @unique
  embedding  Float[]
  modelName  String?  @default("openai-embedding-3-small") // Track which model generated this embedding
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_vectors")
}
